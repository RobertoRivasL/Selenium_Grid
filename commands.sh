#!/bin/bash

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Chequeo de dependencias
check_dependencies() {
    local missing=0
    for cmd in docker-compose curl nc python3 mvn; do
        if ! command -v $cmd &> /dev/null; then
            echo -e "${RED}‚ùå Falta la dependencia: $cmd${NC}"
            missing=1
        fi
    done
    if [ $missing -eq 1 ]; then
        echo -e "${RED}Por favor instala las dependencias faltantes y vuelve a intentarlo.${NC}"
        exit 1
    fi
}

# Limpieza de pantalla robusta
safe_clear() {
    command -v clear &> /dev/null && clear
}

# Men√∫ principal
show_menu() {
    echo -e "${BLUE}===========================================${NC}"
    echo -e "${BLUE}     SELENIUM GRID DOCKER MANAGER${NC}"
    echo -e "${BLUE}===========================================${NC}"
    echo "1. Levantar Selenium Grid"
    echo "2. Verificar estado del Grid"
    echo "3. Ver logs del Hub"
    echo "4. Ver logs de los nodos"
    echo "5. Ejecutar tests"
    echo "6. Parar el Grid"
    echo "7. Limpiar contenedores"
    echo "8. Abrir Grid Console"
    echo "9. Verificar conectividad"
    echo "0. Salir"
    echo -e "${BLUE}===========================================${NC}"
}

start_grid() {
    echo -e "${GREEN}üöÄ Levantando Selenium Grid...${NC}"
    if ! docker-compose up -d; then
        echo -e "${RED}‚ùå Error al levantar el Grid.${NC}"
        return
    fi
    echo -e "${YELLOW}‚è≥ Esperando que el Grid est√© listo...${NC}"
    sleep 10
    echo -e "${GREEN}‚úÖ Grid iniciado. Verificando estado...${NC}"
    check_grid_status
}

check_grid_status() {
    echo -e "${BLUE}üìä Estado del Selenium Grid:${NC}\n"
    echo -e "${YELLOW}üì¶ Contenedores:${NC}"
    docker-compose ps || echo -e "${RED}No se pudo obtener el estado de los contenedores.${NC}"
    echo ""
    echo -e "${YELLOW}üîç Estado del Grid:${NC}"
    curl -s http://localhost:4444/wd/hub/status | python3 -m json.tool 2>/dev/null || echo "Grid no disponible"
    echo ""
    echo -e "${YELLOW}üåê URLs importantes:${NC}"
    echo "Grid Console: http://localhost:4444"
    echo "Hub Status: http://localhost:4444/wd/hub/status"
    echo "Sessions: http://localhost:4444/ui/index.html#/sessions"
}

view_hub_logs() {
    echo -e "${BLUE}üìã Logs del Selenium Hub:${NC}"
    docker-compose logs -f selenium-hub || echo -e "${RED}No se pudo obtener logs del Hub.${NC}"
}

view_node_logs() {
    echo -e "${BLUE}üìã Logs de los nodos:${NC}"
    echo "Seleccione el nodo:"
    echo "1. Chrome"
    echo "2. Firefox"
    echo "3. Edge"
    echo "4. Todos"
    read -p "Opci√≥n: " node_choice
    case $node_choice in
        1) docker-compose logs -f chrome-node ;;
        2) docker-compose logs -f firefox-node ;;
        3) docker-compose logs -f edge-node ;;
        4) docker-compose logs -f chrome-node firefox-node edge-node ;;
        *) echo -e "${RED}Opci√≥n no v√°lida${NC}" ;;
    esac
}

run_tests() {
    echo -e "${GREEN}üß™ Ejecutando tests de Selenium...${NC}"
    if ! curl -s http://localhost:4444/wd/hub/status > /dev/null; then
        echo -e "${RED}‚ùå El Grid no est√° disponible. Iniciando...${NC}"
        start_grid
        sleep 5
    fi
    echo -e "${YELLOW}‚è≥ Compilando proyecto...${NC}"
    if ! mvn clean compile; then
        echo -e "${RED}‚ùå Fall√≥ la compilaci√≥n.${NC}"
        return
    fi
    echo -e "${YELLOW}‚è≥ Ejecutando tests...${NC}"
    if ! mvn test; then
        echo -e "${RED}‚ùå Fallaron los tests.${NC}"
        return
    fi
    echo -e "${GREEN}‚úÖ Tests completados. Revisa los resultados arriba.${NC}"
}

stop_grid() {
    echo -e "${YELLOW}üõë Parando Selenium Grid...${NC}"
    if ! docker-compose down; then
        echo -e "${RED}‚ùå Error al detener el Grid.${NC}"
        return
    fi
    echo -e "${GREEN}‚úÖ Grid detenido.${NC}"
}

clean_containers() {
    echo -e "${YELLOW}üßπ Limpiando contenedores y vol√∫menes...${NC}"
    docker-compose down -v --remove-orphans
    docker system prune -f
    echo -e "${GREEN}‚úÖ Limpieza completada.${NC}"
}

open_console() {
    echo -e "${BLUE}üåê Abriendo Grid Console...${NC}"
    if command -v xdg-open > /dev/null; then
        xdg-open http://localhost:4444
    elif command -v open > /dev/null; then
        open http://localhost:4444
    else
        echo "Abrir manualmente: http://localhost:4444"
    fi
}

check_connectivity() {
    echo -e "${BLUE}üîç Verificando conectividad...${NC}\n"
    echo -e "${YELLOW}üì° Puertos:${NC}"
    for port in 4444 4442 4443 5900 5901; do
        status=$(nc -z localhost $port && echo 'OK' || echo 'FAIL')
        echo "Puerto $port: $status"
    done
    echo ""
    echo -e "${YELLOW}üîç Grid API:${NC}"
    curl -s http://localhost:4444/wd/hub/status | grep -q "ready" && echo "Grid: OK" || echo "Grid: FAIL"
    echo ""
    echo -e "${YELLOW}üìã Nodos registrados:${NC}"
    curl -s http://localhost:4444/wd/hub/status | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    nodes = data.get('value', {}).get('nodes', [])
    for node in nodes:
        print(f\"Node: {node.get('id', 'Unknown')} - Status: {node.get('availability', 'Unknown')}\")
except:
    print('No se pudo obtener informaci√≥n de nodos')
"
}

main() {
    check_dependencies
    while true; do
        show_menu
        read -p "Seleccione una opci√≥n: " choice
        case $choice in
            1) start_grid ;;
            2) check_grid_status ;;
            3) view_hub_logs ;;
            4) view_node_logs ;;
            5) run_tests ;;
            6) stop_grid ;;
            7) clean_containers ;;
            8) open_console ;;
            9) check_connectivity ;;
            0) echo -e "${GREEN}üëã ¬°Hasta luego!${NC}"; exit 0 ;;
            *) echo -e "${RED}‚ùå Opci√≥n no v√°lida${NC}" ;;
        esac
        echo ""
        read -p "Presione Enter para continuar..."
        safe_clear
    done
}

main